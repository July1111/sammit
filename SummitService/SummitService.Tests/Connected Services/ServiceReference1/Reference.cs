//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SummitService.Tests.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Authorisation", ReplyAction="http://tempuri.org/IService1/AuthorisationResponse")]
        Auth Authorisation(string Login, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Authorisation", ReplyAction="http://tempuri.org/IService1/AuthorisationResponse")]
        System.Threading.Tasks.Task<Auth> AuthorisationAsync(string Login, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddSummit", ReplyAction="http://tempuri.org/IService1/AddSummitResponse")]
        SummitService.Summit AddSummit(SummitService.Summit sum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddSummit", ReplyAction="http://tempuri.org/IService1/AddSummitResponse")]
        System.Threading.Tasks.Task<SummitService.Summit> AddSummitAsync(SummitService.Summit sum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddCountry", ReplyAction="http://tempuri.org/IService1/AddCountryResponse")]
        SummitService.Country AddCountry(SummitService.Country cou);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddCountry", ReplyAction="http://tempuri.org/IService1/AddCountryResponse")]
        System.Threading.Tasks.Task<SummitService.Country> AddCountryAsync(SummitService.Country cou);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddVariant", ReplyAction="http://tempuri.org/IService1/AddVariantResponse")]
        SummitService.Variant AddVariant(SummitService.Variant va);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddVariant", ReplyAction="http://tempuri.org/IService1/AddVariantResponse")]
        System.Threading.Tasks.Task<SummitService.Variant> AddVariantAsync(SummitService.Variant va);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddVoice", ReplyAction="http://tempuri.org/IService1/AddVoiceResponse")]
        SummitService.Voice AddVoice(SummitService.Voice vo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddVoice", ReplyAction="http://tempuri.org/IService1/AddVoiceResponse")]
        System.Threading.Tasks.Task<SummitService.Voice> AddVoiceAsync(SummitService.Voice vo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteAllVoices", ReplyAction="http://tempuri.org/IService1/DeleteAllVoicesResponse")]
        void DeleteAllVoices();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteAllVoices", ReplyAction="http://tempuri.org/IService1/DeleteAllVoicesResponse")]
        System.Threading.Tasks.Task DeleteAllVoicesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SelectCountry", ReplyAction="http://tempuri.org/IService1/SelectCountryResponse")]
        SummitService.Country[] SelectCountry();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SelectCountry", ReplyAction="http://tempuri.org/IService1/SelectCountryResponse")]
        System.Threading.Tasks.Task<SummitService.Country[]> SelectCountryAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SelectSummit", ReplyAction="http://tempuri.org/IService1/SelectSummitResponse")]
        SummitService.Summit[] SelectSummit();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SelectSummit", ReplyAction="http://tempuri.org/IService1/SelectSummitResponse")]
        System.Threading.Tasks.Task<SummitService.Summit[]> SelectSummitAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : SummitService.Tests.ServiceReference1.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<SummitService.Tests.ServiceReference1.IService1>, SummitService.Tests.ServiceReference1.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Auth Authorisation(string Login, string Password) {
            return base.Channel.Authorisation(Login, Password);
        }
        
        public System.Threading.Tasks.Task<Auth> AuthorisationAsync(string Login, string Password) {
            return base.Channel.AuthorisationAsync(Login, Password);
        }
        
        public SummitService.Summit AddSummit(SummitService.Summit sum) {
            return base.Channel.AddSummit(sum);
        }
        
        public System.Threading.Tasks.Task<SummitService.Summit> AddSummitAsync(SummitService.Summit sum) {
            return base.Channel.AddSummitAsync(sum);
        }
        
        public SummitService.Country AddCountry(SummitService.Country cou) {
            return base.Channel.AddCountry(cou);
        }
        
        public System.Threading.Tasks.Task<SummitService.Country> AddCountryAsync(SummitService.Country cou) {
            return base.Channel.AddCountryAsync(cou);
        }
        
        public SummitService.Variant AddVariant(SummitService.Variant va) {
            return base.Channel.AddVariant(va);
        }
        
        public System.Threading.Tasks.Task<SummitService.Variant> AddVariantAsync(SummitService.Variant va) {
            return base.Channel.AddVariantAsync(va);
        }
        
        public SummitService.Voice AddVoice(SummitService.Voice vo) {
            return base.Channel.AddVoice(vo);
        }
        
        public System.Threading.Tasks.Task<SummitService.Voice> AddVoiceAsync(SummitService.Voice vo) {
            return base.Channel.AddVoiceAsync(vo);
        }
        
        public void DeleteAllVoices() {
            base.Channel.DeleteAllVoices();
        }
        
        public System.Threading.Tasks.Task DeleteAllVoicesAsync() {
            return base.Channel.DeleteAllVoicesAsync();
        }
        
        public SummitService.Country[] SelectCountry() {
            return base.Channel.SelectCountry();
        }
        
        public System.Threading.Tasks.Task<SummitService.Country[]> SelectCountryAsync() {
            return base.Channel.SelectCountryAsync();
        }
        
        public SummitService.Summit[] SelectSummit() {
            return base.Channel.SelectSummit();
        }
        
        public System.Threading.Tasks.Task<SummitService.Summit[]> SelectSummitAsync() {
            return base.Channel.SelectSummitAsync();
        }
    }
}
