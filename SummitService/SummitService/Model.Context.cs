//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SummitService
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class SummitDBEntity : DbContext
    {
        public SummitDBEntity()
            : base("name=SummitDBEntity")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            modelBuilder.Entity<User>().Map(m =>
            {
                m.Properties(t => new { t.ID_User });
                m.Property(t => t.FIO).HasColumnName("FIO");
            }).Map(m =>
            {
                m.Property(t => t.ID_User).HasColumnName("ID_User");
                m.Properties(t => new { t.Login, t.Password });
                m.ToTable("UserDetails");
            });
            modelBuilder.Entity<User>().Map(m =>
            {
                m.Properties(t => new { t.ID_User });
                m.Property(t => t.FIO).HasColumnName("FIO");
            }).Map(m =>
            {
                m.Property(t => t.ID_User).HasColumnName("ID_User");
                m.Properties(t => new { t.Login, t.Password });
                m.ToTable("UsersDetails");
            });
        }
    
        public virtual DbSet<Country> Countries { get; set; }
        public virtual DbSet<Summit> Summits { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<Variant> Variants { get; set; }
        public virtual DbSet<Voice> Voices { get; set; }
    
        public virtual int AddCountry(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddCountry", nameParameter);
        }
    
        public virtual int AddSummit(string name, Nullable<System.DateTime> date)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddSummit", nameParameter, dateParameter);
        }
    
        public virtual int AddVariant(Nullable<System.DateTime> startDate, Nullable<System.DateTime> finishDate, Nullable<int> country_ID, Nullable<int> user_ID, Nullable<int> summit_ID)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var finishDateParameter = finishDate.HasValue ?
                new ObjectParameter("FinishDate", finishDate) :
                new ObjectParameter("FinishDate", typeof(System.DateTime));
    
            var country_IDParameter = country_ID.HasValue ?
                new ObjectParameter("Country_ID", country_ID) :
                new ObjectParameter("Country_ID", typeof(int));
    
            var user_IDParameter = user_ID.HasValue ?
                new ObjectParameter("User_ID", user_ID) :
                new ObjectParameter("User_ID", typeof(int));
    
            var summit_IDParameter = summit_ID.HasValue ?
                new ObjectParameter("Summit_ID", summit_ID) :
                new ObjectParameter("Summit_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddVariant", startDateParameter, finishDateParameter, country_IDParameter, user_IDParameter, summit_IDParameter);
        }
    
        public virtual int AddVoice(Nullable<int> user_ID, Nullable<int> variant_ID)
        {
            var user_IDParameter = user_ID.HasValue ?
                new ObjectParameter("User_ID", user_ID) :
                new ObjectParameter("User_ID", typeof(int));
    
            var variant_IDParameter = variant_ID.HasValue ?
                new ObjectParameter("Variant_ID", variant_ID) :
                new ObjectParameter("Variant_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddVoice", user_IDParameter, variant_IDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> Authorisation(string login, string password)
        {
            var loginParameter = login != null ?
                new ObjectParameter("Login", login) :
                new ObjectParameter("Login", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("Authorisation", loginParameter, passwordParameter);
        }
    
        public virtual int DeleteAllVoices()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteAllVoices");
        }
    
        public virtual ObjectResult<SelectCountry_Result> SelectCountry()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectCountry_Result>("SelectCountry");
        }
    
        public virtual ObjectResult<SelectSummit_Result> SelectSummit()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectSummit_Result>("SelectSummit");
        }
    
        public virtual ObjectResult<SelectVariant_Result> SelectVariant()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectVariant_Result>("SelectVariant");
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual ObjectResult<Summarizing_Result> Summarizing()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Summarizing_Result>("Summarizing");
        }


    }
}
